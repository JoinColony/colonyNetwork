version: 2

job_common: &job_common
  docker:
    - image: cimg/node:14.18.2
      auth:
        username: colonyci
        password: $COLONYCI_DOCKERHUB_PASSWORD
  working_directory: ~/colonyNetwork
  run:
job_python: &job_python
  docker:
    - image: cimg/python:3.8.13-node
      auth:
        username: colonyci
        password: $COLONYCI_DOCKERHUB_PASSWORD
  working_directory: ~/colonyNetwork
step_save_cache: &step_save_cache
  save_cache:
    paths:
      - ~/.npm
    key: node-modules-{{ checksum "package-lock.json" }}
step_restore_cache: &step_restore_cache
  restore_cache:
    keys:
      - node-modules-{{ checksum "package-lock.json" }}
step_setup_global_packages: &step_setup_global_packages
  run:
    name: "Set up global packages"
    command: |
      npm set cache ~/.npm
      sudo npm install -g npm@8.1.4
      npm ci
      git submodule update --init
step_pull_solc_docker: &step_pull_solc_docker
    run:
      name: "Pull solc docker image"
      command: docker pull ethereum/solc:0.5.8
step_setup_slither: &step_setup_slither
    run:
      name: "Setup slither analyser https://github.com/crytic/slither"
      command: |
        wget https://github.com/ethereum/solidity/releases/download/v0.5.8/solc-static-linux
        chmod +x solc-static-linux
        sudo mv solc-static-linux /usr/local/bin/solc
        pip install slither-analyzer
        pip install solc-select
        solc-select install 0.8.25
        solc-select use 0.8.25

jobs:
  unit-test-reputation:
    <<: *job_common
    steps:
      - checkout
      - <<: *step_restore_cache
      - setup_remote_docker:
          version: docker23
      - <<: *step_pull_solc_docker
      - <<: *step_setup_global_packages
      - run:
          name: "Install lsof"
          command: |
            sudo apt-get update
            sudo apt-get install lsof
      - run:
          name: "Running reputation system unit tests"
          command: npm run test:reputation:1
          environment:
            NODE_OPTIONS: --max-old-space-size=6144
      - run:
          name: "Reset chains"
          command: |
            sudo apt-get update
            sudo apt-get install lsof
            npm run stop:blockchain:client && rm -rf ganache-chain-db*
      - run:
          name: "Running reputation system unit tests"
          command: npm run test:reputation:2
          environment:
            NODE_OPTIONS: --max-old-space-size=6144
      # - run:
      #     name: "Running storage consistency smoke tests"
      #     command: npm run test:contracts:smoke
  build-checks:
    <<: *job_common
    steps:
      - checkout
      - <<: *step_restore_cache
      - setup_remote_docker:
          version: docker23
      - <<: *step_pull_solc_docker
      - <<: *step_setup_global_packages
      - run:
          name: "Linting JavaScript"
          command: npm run eslint
      - run:
          name: "Linting Solidity"
          command: npm run solhint
      - run:
          name: "Building Docs"
          command: npm run build:docs
      - run:
          name: "Check git hooks run"
          command: npm run check:gitchanges
      - run:
          name: "Checking contract storage variables"
          command: npm run check:storagevars
      - run:
          name: "Checking contract recovery modifiers"
          command: npm run check:recoverymods
      - run:
          name: "Checking contract authDomain modifiers"
          command: npm run check:auth
      - run:
          name: "Check contract sizes"
          command: npx hardhat size-contracts
      - run:
          name: "Checking contract versions"
          command: npm run check:versioning
  unit-test-contracts:
    <<: *job_common
    steps:
      - checkout
      - <<: *step_restore_cache
      - setup_remote_docker:
          version: docker23
      - <<: *step_pull_solc_docker
      - <<: *step_setup_global_packages
      - run:
          name: "Install lsof"
          command: |
            sudo apt-get update
            sudo apt-get install lsof
      - run:
          name: "Running network contracts unit tests"
          command: npm run test:contracts
          environment:
            NODE_OPTIONS: --max-old-space-size=6144
      - <<: *step_save_cache
      # Save test results
      - store_test_results:
          path: test-results.xml
      - store_artifacts:
          path: test-results.xml
      - store_artifacts:
          path: coverage-miner
  unit-test-extensions:
    <<: *job_common
    steps:
      - checkout
      - <<: *step_restore_cache
      - setup_remote_docker:
          version: docker23
      - <<: *step_pull_solc_docker
      - <<: *step_setup_global_packages
      - run:
          name: "Install lsof"
          command: |
            sudo apt-get update
            sudo apt-get install lsof
      - run:
          name: "Running extension contracts unit tests"
          command: npm run test:contracts:extensions
          environment:
            NODE_OPTIONS: --max-old-space-size=6144
      - <<: *step_save_cache
      # Save test results
      - store_test_results:
          path: test-results.xml
      - store_artifacts:
          path: test-results.xml
      - store_artifacts:
          path: coverage-miner
  unit-test-other:
    <<: *job_common
    steps:
      - checkout
      - <<: *step_restore_cache
      - setup_remote_docker:
          version: docker23
      - <<: *step_pull_solc_docker
      - <<: *step_setup_global_packages
      - run:
          name: "Download parity"
          command: wget https://releases.parity.io/ethereum/v2.7.2/x86_64-unknown-linux-gnu/parity
      - run:
          name: "Setup parity"
          command: |
            sudo mv parity /usr/bin
            chmod 755 /usr/bin/parity
            echo "password" > parityPassword
            cp ./parity-genesis.template.json ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef01/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef02/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef03/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef04/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef05/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef06/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef07/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef08/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef09/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef10/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef11/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef12/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef13/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef14/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef15/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef16/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef17/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef18/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
      - run:
          name: "Install lsof"
          command: |
            sudo apt-get update
            sudo apt-get install lsof
      - run:
          name: "Running upgrade tests"
          command: npm run test:contracts:upgrade:parity && npm run test:contracts:upgrade:ganache
          environment:
            NODE_OPTIONS: --max-old-space-size=6144
      - run:
          name: "Running gas cost tests"
          command: npm run test:contracts:gasCosts && npx codechecks
      - run:
          name: "Running patricia tree tests"
          command: npm run test:contracts:patricia
      - <<: *step_save_cache
      # Save test results
      - store_test_results:
          path: test-results.xml
      - store_artifacts:
          path: test-results.xml
      - store_artifacts:
          path: coverage-miner
  coverage-test-contracts:
    <<: *job_common
    steps:
      - checkout
      - <<: *step_restore_cache
      - setup_remote_docker:
          version: docker23
      - <<: *step_pull_solc_docker
      - <<: *step_setup_global_packages
      - run:
          name: "Running core contract unit tests with coverage"
          command: npm run test:contracts:coverage
          environment:
            NODE_OPTIONS: --max-old-space-size=6144
      - persist_to_workspace:
          root: ./
          paths:
            - coverage-contracts
  coverage-test-upgrade:
    <<: *job_common
    steps:
      - checkout
      - <<: *step_restore_cache
      - setup_remote_docker:
          version: docker23
      - <<: *step_pull_solc_docker
      - <<: *step_setup_global_packages
      - run:
          name: "Running upgrade tests with coverage"
          command: npm run test:contracts:upgrade:coverage
          environment:
            NODE_OPTIONS: --max-old-space-size=6144
      - persist_to_workspace:
          root: ./
          paths:
            - coverage-upgrade
  coverage-test-extensions:
    <<: *job_common
    steps:
      - checkout
      - <<: *step_restore_cache
      - setup_remote_docker:
          version: docker23
      - <<: *step_pull_solc_docker
      - <<: *step_setup_global_packages
      - run:
          name: "Running extension contract unit tests with coverage"
          command: npm run test:contracts:extensions:coverage
          environment:
            NODE_OPTIONS: --max-old-space-size=6144
      - persist_to_workspace:
          root: ./
          paths:
            - coverage-extensions
  coverage-test-reputation:
    <<: *job_common
    steps:
      - checkout
      - <<: *step_restore_cache
      - setup_remote_docker:
          version: docker23
      - <<: *step_pull_solc_docker
      - <<: *step_setup_global_packages
      - run:
          name: "Running reputation tests with coverage"
          command: npm run test:reputation:coverage
          environment:
            NODE_OPTIONS: --max-old-space-size=6144
      - persist_to_workspace:
          root: ./
          paths:
            - coverage-reputation
  coverage-test-chainid:
    <<: *job_common
    steps:
      - checkout
      - <<: *step_restore_cache
      - setup_remote_docker:
          version: docker23
      - <<: *step_pull_solc_docker
      - <<: *step_setup_global_packages
      - run:
          name: "Running chainid tests with coverage for mainnet"
          command: CHAIN_ID=1 npm run test:contracts:chainid:coverage
          environment:
            NODE_OPTIONS: --max-old-space-size=6144
      - run:
          name: "Running chainid tests with coverage for goerli"
          command: CHAIN_ID=5 npm run test:contracts:chainid:coverage
          environment:
            NODE_OPTIONS: --max-old-space-size=6144
      - run:
          name: "Running chainid tests with coverage for xDai"
          command: CHAIN_ID=100 npm run test:contracts:chainid:coverage
          environment:
            NODE_OPTIONS: --max-old-space-size=6144
      - run:
          name: "Running chainid tests with coverage for an unsupported network"
          command: CHAIN_ID=777 npm run test:contracts:chainid:coverage
          environment:
            NODE_OPTIONS: --max-old-space-size=6144
      - persist_to_workspace:
          root: ./
          paths:
            - coverage-chainid-1
            - coverage-chainid-5
            - coverage-chainid-100
            - coverage-chainid-777
  coverage-test-bridging:
    <<: *job_common
    steps:
      - checkout
      - <<: *step_restore_cache
      - setup_remote_docker:
          version: docker23
      - <<: *step_pull_solc_docker
      - <<: *step_setup_global_packages
      - run:
          name: "Installing the safe-contracts dependencies"
          command: cd ./lib/safe-contracts && npm i --ignore-scripts
      - run:
          name: "Running coverage tests for home-side of bridge"
          command: npm run test:contracts:bridging:1:coverage
          environment:
            NODE_OPTIONS: --max-old-space-size=6144
      - run:
          name: "Reset chains"
          command: |
            sudo apt-get update
            sudo apt-get install lsof
            npm run stop:blockchain:client && rm -rf ganache-chain-db*
      - run:
          name: "Running coverage tests for foreign-side of bridge"
          command: npm run test:contracts:bridging:2:coverage
          environment:
            NODE_OPTIONS: --max-old-space-size=6144
      - persist_to_workspace:
          root: ./
          paths:
            - coverage-cross-chain-foreign
            - coverage-cross-chain-home
  check-coverage:
    <<: *job_common
    steps:
      - checkout
      - <<: *step_restore_cache
      - run:
          name: "Install packages"
          command: |
            sudo npm install -g npm@8.1.4
            npm ci
      - attach_workspace:
          at: ./
      - run:
          name: "Merge coverage runs and check coverage thresholds"
          command: npm run check:coverage
      # Save coverage artifacts
      - store_artifacts:
          path: coverage-merged
  security-analysis:
    <<: *job_python
    steps:
      - checkout
      - <<: *step_restore_cache
      - setup_remote_docker:
          version: docker23
      - <<: *step_pull_solc_docker
      - <<: *step_setup_global_packages
      - <<: *step_setup_slither
      - run:
          name: "Slither analysis"
          command: npm run test:security:slither
  end-to-end-tests:
    <<: *job_common
    steps:
      - checkout
      - <<: *step_restore_cache
      - setup_remote_docker:
          version: docker23
      - <<: *step_pull_solc_docker
      - <<: *step_setup_global_packages
      - run:
          name: "Running end-to-end tests"
          command: npm run test:contracts:e2e
          environment:
            NODE_OPTIONS: --max-old-space-size=6144

workflows:
  version: 2
  commit:
    jobs:
      - build-checks:
          context: dockerhub-credentials
      - security-analysis:
          context: dockerhub-credentials
      - unit-test-contracts:
          context: dockerhub-credentials
      - unit-test-extensions:
          context: dockerhub-credentials
      - unit-test-reputation:
          context: dockerhub-credentials
      - unit-test-other:
          context: dockerhub-credentials
      - coverage-test-contracts:
          context: dockerhub-credentials
      - coverage-test-extensions:
          context: dockerhub-credentials
      - coverage-test-reputation:
          context: dockerhub-credentials
      - coverage-test-chainid:
          context: dockerhub-credentials
      - coverage-test-upgrade:
          context: dockerhub-credentials
      - coverage-test-bridging:
          context: dockerhub-credentials
      - check-coverage:
          context: dockerhub-credentials
          requires:
            - coverage-test-contracts
            - coverage-test-extensions
            - coverage-test-reputation
            - coverage-test-chainid
            - coverage-test-upgrade
            - coverage-test-bridging
 # nightly:
 #   triggers:
 #     - schedule:
 #         cron: "0 1 * * *" # 1am UTC
 #         filters:
 #           branches:
 #             only:
 #               - develop
 #   jobs:
 #     - end-to-end-tests
