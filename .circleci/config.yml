version: 2

job_common: &job_common
  docker:
    - image: circleci/node:10.12-stretch
  working_directory: ~/colonyNetwork
step_save_cache: &step_save_cache
  save_cache:
    paths:
      - ~/.cache/yarn
    key: node-modules-{{ checksum "yarn.lock" }}
step_restore_cache: &step_restore_cache
  restore_cache:
    keys:
      - node-modules-{{ checksum "yarn.lock" }}
step_setup_global_packages: &step_setup_global_packages
  run:
    name: "Set up global packages"
    command: |
      yarn --pure-lockfile --network-concurrency 1
      git submodule update --remote --init
      yarn run provision:token:contracts
step_pull_solc_docker: &step_pull_solc_docker
    run:
      name: "Pull solc docker image"
      command: docker pull ethereum/solc:0.5.6

jobs:
  lint-and-unit-test:
    <<: *job_common
    steps:
      - checkout
      - <<: *step_restore_cache
      - setup_remote_docker
      - <<: *step_pull_solc_docker
      - <<: *step_setup_global_packages
      - run:
          name: "Download parity"
          command: wget https://releases.parity.io/ethereum/v2.3.8/x86_64-unknown-linux-gnu/parity
      - run:
          name: "Setup parity"
          command: |
            sudo mv parity /usr/bin
            chmod 755 /usr/bin/parity
            echo "password" > parityPassword
            cp ./parity-genesis.template.json ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef01/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef02/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef03/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef04/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef05/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef06/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef07/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef08/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef09/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef10/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef11/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef12/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
      - run:
          name: "Install lsof"
          command: |
            sudo apt-get update
            sudo apt-get install lsof
      - run:
          name: "Linting JavaScript"
          command: yarn run eslint
      - run:
          name: "Linting Solidity"
          command: yarn run solium
      - run:
          name: "Checking contract storage variables"
          command: yarn run check:storagevars
      - run:
          name: "Checking contract recovery modifiers"
          command: yarn run check:recoverymods
      - run:
          name: "Checking contract authDomain modifiers"
          command: yarn run check:auth
      - run:
          name: "Running unit tests"
          command: yarn run test:contracts
      - run:
          name: "Running upgrade tests"
          command: yarn run test:contracts:upgrade:parity && yarn run test:contracts:upgrade:ganache
      - run:
          name: "Running gas cost tests"
          command: yarn run test:contracts:gasCosts
      - run:
          name: "Running patricia tree tests"
          command: yarn run test:contracts:patricia
      - <<: *step_save_cache
      # Save test results
      - store_test_results:
          path: test-results.xml
      - store_artifacts:
          path: test-results.xml
  test-coverage:
    <<: *job_common
    steps:
      - checkout
      - <<: *step_restore_cache
      - setup_remote_docker
      - <<: *step_pull_solc_docker
      - <<: *step_setup_global_packages
      - run:
          name: "Running unit tests with coverage"
          command: yarn run test:contracts:coverage
      # Save coverage artifacts
      - store_artifacts:
          path: coverage
  security-analysis:
    <<: *job_common
    steps:
      - checkout
      - <<: *step_restore_cache
      - setup_remote_docker
      - <<: *step_pull_solc_docker
      - <<: *step_setup_global_packages
      - run:
          name: "MythX security analysis"
          command: yarn run test:contracts:security
  end-to-end-tests:
    <<: *job_common
    steps:
      - checkout
      - <<: *step_restore_cache
      - setup_remote_docker
      - <<: *step_pull_solc_docker
      - <<: *step_setup_global_packages
      - run:
          name: "Running end-to-end tests"
          command: yarn run test:contracts:e2e

workflows:
  version: 2
  commit:
    jobs:
      - security-analysis:
          context: colony-network-context
  nightly:
    triggers:
      - schedule:
          cron: "0 1 * * *" # 1am UTC
          filters:
            branches:
              only:
                - develop
    jobs:
      - security-analysis:
          context: colony-network-context
      - end-to-end-tests
