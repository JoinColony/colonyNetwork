{
  "storage": [
    {
      "astId": 45121,
      "contract": "contracts/colony/ColonyAuthority.sol:ColonyAuthority",
      "label": "authority",
      "offset": 0,
      "slot": "0",
      "type": "t_contract(DSAuthority)45107"
    },
    {
      "astId": 45123,
      "contract": "contracts/colony/ColonyAuthority.sol:ColonyAuthority",
      "label": "owner",
      "offset": 0,
      "slot": "1",
      "type": "t_address"
    },
    {
      "astId": 45605,
      "contract": "contracts/colony/ColonyAuthority.sol:ColonyAuthority",
      "label": "_root_users",
      "offset": 0,
      "slot": "2",
      "type": "t_mapping(t_address,t_bool)"
    },
    {
      "astId": 45609,
      "contract": "contracts/colony/ColonyAuthority.sol:ColonyAuthority",
      "label": "_user_roles",
      "offset": 0,
      "slot": "3",
      "type": "t_mapping(t_address,t_bytes32)"
    },
    {
      "astId": 45615,
      "contract": "contracts/colony/ColonyAuthority.sol:ColonyAuthority",
      "label": "_capability_roles",
      "offset": 0,
      "slot": "4",
      "type": "t_mapping(t_address,t_mapping(t_bytes4,t_bytes32))"
    },
    {
      "astId": 45621,
      "contract": "contracts/colony/ColonyAuthority.sol:ColonyAuthority",
      "label": "_public_capabilities",
      "offset": 0,
      "slot": "5",
      "type": "t_mapping(t_address,t_mapping(t_bytes4,t_bool))"
    },
    {
      "astId": 18215,
      "contract": "contracts/colony/ColonyAuthority.sol:ColonyAuthority",
      "label": "userDomainRoles",
      "offset": 0,
      "slot": "6",
      "type": "t_mapping(t_address,t_mapping(t_uint256,t_bytes32))"
    },
    {
      "astId": 2618,
      "contract": "contracts/colony/ColonyAuthority.sol:ColonyAuthority",
      "label": "colony",
      "offset": 0,
      "slot": "7",
      "type": "t_address"
    }
  ],
  "types": {
    "t_address": {
      "encoding": "inplace",
      "label": "address",
      "numberOfBytes": "20"
    },
    "t_bool": {
      "encoding": "inplace",
      "label": "bool",
      "numberOfBytes": "1"
    },
    "t_bytes32": {
      "encoding": "inplace",
      "label": "bytes32",
      "numberOfBytes": "32"
    },
    "t_bytes4": {
      "encoding": "inplace",
      "label": "bytes4",
      "numberOfBytes": "4"
    },
    "t_contract(DSAuthority)45107": {
      "encoding": "inplace",
      "label": "contract DSAuthority",
      "numberOfBytes": "20"
    },
    "t_mapping(t_address,t_bool)": {
      "encoding": "mapping",
      "key": "t_address",
      "label": "mapping(address => bool)",
      "numberOfBytes": "32",
      "value": "t_bool"
    },
    "t_mapping(t_address,t_bytes32)": {
      "encoding": "mapping",
      "key": "t_address",
      "label": "mapping(address => bytes32)",
      "numberOfBytes": "32",
      "value": "t_bytes32"
    },
    "t_mapping(t_address,t_mapping(t_bytes4,t_bool))": {
      "encoding": "mapping",
      "key": "t_address",
      "label": "mapping(address => mapping(bytes4 => bool))",
      "numberOfBytes": "32",
      "value": "t_mapping(t_bytes4,t_bool)"
    },
    "t_mapping(t_address,t_mapping(t_bytes4,t_bytes32))": {
      "encoding": "mapping",
      "key": "t_address",
      "label": "mapping(address => mapping(bytes4 => bytes32))",
      "numberOfBytes": "32",
      "value": "t_mapping(t_bytes4,t_bytes32)"
    },
    "t_mapping(t_address,t_mapping(t_uint256,t_bytes32))": {
      "encoding": "mapping",
      "key": "t_address",
      "label": "mapping(address => mapping(uint256 => bytes32))",
      "numberOfBytes": "32",
      "value": "t_mapping(t_uint256,t_bytes32)"
    },
    "t_mapping(t_bytes4,t_bool)": {
      "encoding": "mapping",
      "key": "t_bytes4",
      "label": "mapping(bytes4 => bool)",
      "numberOfBytes": "32",
      "value": "t_bool"
    },
    "t_mapping(t_bytes4,t_bytes32)": {
      "encoding": "mapping",
      "key": "t_bytes4",
      "label": "mapping(bytes4 => bytes32)",
      "numberOfBytes": "32",
      "value": "t_bytes32"
    },
    "t_mapping(t_uint256,t_bytes32)": {
      "encoding": "mapping",
      "key": "t_uint256",
      "label": "mapping(uint256 => bytes32)",
      "numberOfBytes": "32",
      "value": "t_bytes32"
    },
    "t_uint256": {
      "encoding": "inplace",
      "label": "uint256",
      "numberOfBytes": "32"
    }
  }
}
