/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IColonyInterface extends Interface {
  functions: {
    approveExitRecovery: TypedFunctionDescription<{ encode([]: []): string }>;

    exitRecoveryMode: TypedFunctionDescription<{ encode([]: []): string }>;

    numRecoveryRoles: TypedFunctionDescription<{ encode([]: []): string }>;

    setStorageSlotRecovery: TypedFunctionDescription<{
      encode([_slot, _value]: [BigNumberish, Arrayish]): string;
    }>;

    isInRecoveryMode: TypedFunctionDescription<{ encode([]: []): string }>;

    checkNotAdditionalProtectedVariable: TypedFunctionDescription<{
      encode([_slot]: [BigNumberish]): string;
    }>;

    removeRecoveryRole: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;

    setRecoveryRole: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;

    enterRecoveryMode: TypedFunctionDescription<{ encode([]: []): string }>;

    authority: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    version: TypedFunctionDescription<{ encode([]: []): string }>;

    upgrade: TypedFunctionDescription<{
      encode([_newVersion]: [BigNumberish]): string;
    }>;

    finishUpgrade: TypedFunctionDescription<{ encode([]: []): string }>;

    getColonyNetwork: TypedFunctionDescription<{ encode([]: []): string }>;

    getToken: TypedFunctionDescription<{ encode([]: []): string }>;

    setRootRole: TypedFunctionDescription<{
      encode([_user, _setTo]: [string, boolean]): string;
    }>;

    setArbitrationRole: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _user,
        _domainId,
        _setTo
      ]: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    }>;

    setArchitectureRole: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _user,
        _domainId,
        _setTo
      ]: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    }>;

    setFundingRole: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _user,
        _domainId,
        _setTo
      ]: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    }>;

    setAdministrationRole: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _user,
        _domainId,
        _setTo
      ]: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    }>;

    hasUserRole: TypedFunctionDescription<{
      encode([_user, _domainId, _role]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    hasInheritedUserRole: TypedFunctionDescription<{
      encode([_user, _domainId, _role, _childSkillIndex, _childDomainId]: [
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    getUserRoles: TypedFunctionDescription<{
      encode([who, where]: [string, BigNumberish]): string;
    }>;

    initialiseColony: TypedFunctionDescription<{
      encode([_colonyNetworkAddress, _token]: [string, string]): string;
    }>;

    bootstrapColony: TypedFunctionDescription<{
      encode([_users, _amount]: [string[], BigNumberish[]]): string;
    }>;

    mintTokens: TypedFunctionDescription<{
      encode([_wad]: [BigNumberish]): string;
    }>;

    registerColonyLabel: TypedFunctionDescription<{
      encode([colonyName, orbitdb]: [string, string]): string;
    }>;

    updateColonyOrbitDB: TypedFunctionDescription<{
      encode([orbitdb]: [string]): string;
    }>;

    addDomain: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _parentDomainId]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    getDomain: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getDomainCount: TypedFunctionDescription<{ encode([]: []): string }>;

    verifyReputationProof: TypedFunctionDescription<{
      encode([key, value, branchMask, siblings]: [
        Arrayish,
        Arrayish,
        BigNumberish,
        Arrayish[]
      ]): string;
    }>;

    makeExpenditure: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _domainId]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    transferExpenditure: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _id, _newOwner]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    cancelExpenditure: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    finalizeExpenditure: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    setExpenditureRecipient: TypedFunctionDescription<{
      encode([_id, _slot, _recipient]: [
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    setExpenditurePayout: TypedFunctionDescription<{
      encode([_id, _slot, _token, _amount]: [
        BigNumberish,
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    setExpenditureSkill: TypedFunctionDescription<{
      encode([_id, _slot, _skillId]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setExpenditurePayoutModifier: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _id,
        _slot,
        _payoutModifier
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setExpenditureClaimDelay: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _id, _slot, _claimDelay]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    claimExpenditurePayout: TypedFunctionDescription<{
      encode([_id, _slot, _token]: [
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    getExpenditureCount: TypedFunctionDescription<{ encode([]: []): string }>;

    getExpenditure: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getExpenditureSlot: TypedFunctionDescription<{
      encode([_id, _slot]: [BigNumberish, BigNumberish]): string;
    }>;

    getExpenditureSlotPayout: TypedFunctionDescription<{
      encode([_id, _slot, _token]: [
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    addPayment: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _recipient,
        _token,
        _amount,
        _domainId,
        _skillId
      ]: [
        BigNumberish,
        BigNumberish,
        string,
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    finalizePayment: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _id]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setPaymentRecipient: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _id, _recipient]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    setPaymentSkill: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _id, _skillId]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setPaymentPayout: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _id, _token, _amount]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    getPayment: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    claimPayment: TypedFunctionDescription<{
      encode([_id, _token]: [BigNumberish, string]): string;
    }>;

    getPaymentCount: TypedFunctionDescription<{ encode([]: []): string }>;

    makeTask: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _specificationHash,
        _domainId,
        _skillId,
        _dueDate
      ]: [
        BigNumberish,
        BigNumberish,
        Arrayish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    getTaskCount: TypedFunctionDescription<{ encode([]: []): string }>;

    getTaskChangeNonce: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    executeTaskChange: TypedFunctionDescription<{
      encode([_sigV, _sigR, _sigS, _mode, _value, _data]: [
        BigNumberish[],
        Arrayish[],
        Arrayish[],
        BigNumberish[],
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    executeTaskRoleAssignment: TypedFunctionDescription<{
      encode([_sigV, _sigR, _sigS, _mode, _value, _data]: [
        BigNumberish[],
        Arrayish[],
        Arrayish[],
        BigNumberish[],
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    submitTaskWorkRating: TypedFunctionDescription<{
      encode([_id, _role, _ratingSecret]: [
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    revealTaskWorkRating: TypedFunctionDescription<{
      encode([_id, _role, _rating, _salt]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    generateSecret: TypedFunctionDescription<{
      encode([_salt, _value]: [Arrayish, BigNumberish]): string;
    }>;

    getTaskWorkRatingSecretsInfo: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getTaskWorkRatingSecret: TypedFunctionDescription<{
      encode([_id, _role]: [BigNumberish, BigNumberish]): string;
    }>;

    setTaskManagerRole: TypedFunctionDescription<{
      encode([_id, _user, _permissionDomainId, _childSkillIndex]: [
        BigNumberish,
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setTaskEvaluatorRole: TypedFunctionDescription<{
      encode([_id, _user]: [BigNumberish, string]): string;
    }>;

    setTaskWorkerRole: TypedFunctionDescription<{
      encode([_id, _user]: [BigNumberish, string]): string;
    }>;

    removeTaskEvaluatorRole: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    removeTaskWorkerRole: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    setTaskSkill: TypedFunctionDescription<{
      encode([_id, _skillId]: [BigNumberish, BigNumberish]): string;
    }>;

    setTaskBrief: TypedFunctionDescription<{
      encode([_id, _specificationHash]: [BigNumberish, Arrayish]): string;
    }>;

    setTaskDueDate: TypedFunctionDescription<{
      encode([_id, _dueDate]: [BigNumberish, BigNumberish]): string;
    }>;

    submitTaskDeliverable: TypedFunctionDescription<{
      encode([_id, _deliverableHash]: [BigNumberish, Arrayish]): string;
    }>;

    submitTaskDeliverableAndRating: TypedFunctionDescription<{
      encode([_id, _deliverableHash, _ratingSecret]: [
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    finalizeTask: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    cancelTask: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    completeTask: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getTask: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getTaskRole: TypedFunctionDescription<{
      encode([_id, _role]: [BigNumberish, BigNumberish]): string;
    }>;

    setRewardInverse: TypedFunctionDescription<{
      encode([_rewardInverse]: [BigNumberish]): string;
    }>;

    getRewardInverse: TypedFunctionDescription<{ encode([]: []): string }>;

    getTaskPayout: TypedFunctionDescription<{
      encode([_id, _role, _token]: [
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    setTaskManagerPayout: TypedFunctionDescription<{
      encode([_id, _token, _amount]: [
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    setTaskEvaluatorPayout: TypedFunctionDescription<{
      encode([_id, _token, _amount]: [
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    setTaskWorkerPayout: TypedFunctionDescription<{
      encode([_id, _token, _amount]: [
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    setAllTaskPayouts: TypedFunctionDescription<{
      encode([_id, _token, _managerAmount, _evaluatorAmount, _workerAmount]: [
        BigNumberish,
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    claimTaskPayout: TypedFunctionDescription<{
      encode([_id, _role, _token]: [
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    startNextRewardPayout: TypedFunctionDescription<{
      encode([_token, key, value, branchMask, siblings]: [
        string,
        Arrayish,
        Arrayish,
        BigNumberish,
        Arrayish[]
      ]): string;
    }>;

    claimRewardPayout: TypedFunctionDescription<{
      encode([_payoutId, _squareRoots, key, value, branchMask, siblings]: [
        BigNumberish,
        BigNumberish[],
        Arrayish,
        Arrayish,
        BigNumberish,
        Arrayish[]
      ]): string;
    }>;

    getRewardPayoutInfo: TypedFunctionDescription<{
      encode([_payoutId]: [BigNumberish]): string;
    }>;

    finalizeRewardPayout: TypedFunctionDescription<{
      encode([_payoutId]: [BigNumberish]): string;
    }>;

    getFundingPot: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getFundingPotCount: TypedFunctionDescription<{ encode([]: []): string }>;

    getFundingPotBalance: TypedFunctionDescription<{
      encode([_potId, _token]: [BigNumberish, string]): string;
    }>;

    getFundingPotPayout: TypedFunctionDescription<{
      encode([_potId, _token]: [BigNumberish, string]): string;
    }>;

    moveFundsBetweenPots: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _fromChildSkillIndex,
        _toChildSkillIndex,
        _fromPot,
        _toPot,
        _amount,
        _token
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    claimColonyFunds: TypedFunctionDescription<{
      encode([_token]: [string]): string;
    }>;

    getNonRewardPotsTotal: TypedFunctionDescription<{
      encode([_token]: [string]): string;
    }>;
  };

  events: {
    RecoveryRoleSet: TypedEventDescription<{
      encodeTopics([user, setTo]: [string | null, null]): string[];
    }>;

    ColonyInitialised: TypedEventDescription<{
      encodeTopics([colonyNetwork, token]: [null, null]): string[];
    }>;

    ColonyBootstrapped: TypedEventDescription<{
      encodeTopics([users, amounts]: [null, null]): string[];
    }>;

    ColonyUpgraded: TypedEventDescription<{
      encodeTopics([oldVersion, newVersion]: [null, null]): string[];
    }>;

    ColonyRoleSet: TypedEventDescription<{
      encodeTopics([user, domainId, role, setTo]: [
        string | null,
        BigNumberish | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    ColonyFundsMovedBetweenFundingPots: TypedEventDescription<{
      encodeTopics([fromPot, toPot, amount, token]: [
        BigNumberish | null,
        BigNumberish | null,
        null,
        null
      ]): string[];
    }>;

    ColonyFundsClaimed: TypedEventDescription<{
      encodeTopics([token, fee, payoutRemainder]: [null, null, null]): string[];
    }>;

    RewardPayoutCycleStarted: TypedEventDescription<{
      encodeTopics([rewardPayoutId]: [null]): string[];
    }>;

    RewardPayoutCycleEnded: TypedEventDescription<{
      encodeTopics([rewardPayoutId]: [null]): string[];
    }>;

    RewardPayoutClaimed: TypedEventDescription<{
      encodeTopics([rewardPayoutId, user, fee, rewardRemainder]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    ColonyRewardInverseSet: TypedEventDescription<{
      encodeTopics([rewardInverse]: [null]): string[];
    }>;

    ExpenditureAdded: TypedEventDescription<{
      encodeTopics([expenditureId]: [null]): string[];
    }>;

    ExpenditureTransferred: TypedEventDescription<{
      encodeTopics([expenditureId, owner]: [
        BigNumberish | null,
        string | null
      ]): string[];
    }>;

    ExpenditureCancelled: TypedEventDescription<{
      encodeTopics([expenditureId]: [BigNumberish | null]): string[];
    }>;

    ExpenditureFinalized: TypedEventDescription<{
      encodeTopics([expenditureId]: [BigNumberish | null]): string[];
    }>;

    ExpenditureRecipientSet: TypedEventDescription<{
      encodeTopics([expenditureId, slot, recipient]: [
        BigNumberish | null,
        BigNumberish | null,
        string | null
      ]): string[];
    }>;

    ExpenditureSkillSet: TypedEventDescription<{
      encodeTopics([expenditureId, slot, skillId]: [
        BigNumberish | null,
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;

    ExpenditurePayoutSet: TypedEventDescription<{
      encodeTopics([expenditureId, slot, token, amount]: [
        BigNumberish | null,
        BigNumberish | null,
        string | null,
        null
      ]): string[];
    }>;

    PaymentAdded: TypedEventDescription<{
      encodeTopics([paymentId]: [null]): string[];
    }>;

    TaskAdded: TypedEventDescription<{
      encodeTopics([taskId]: [null]): string[];
    }>;

    TaskBriefSet: TypedEventDescription<{
      encodeTopics([taskId, specificationHash]: [
        BigNumberish | null,
        null
      ]): string[];
    }>;

    TaskDueDateSet: TypedEventDescription<{
      encodeTopics([taskId, dueDate]: [BigNumberish | null, null]): string[];
    }>;

    TaskSkillSet: TypedEventDescription<{
      encodeTopics([taskId, skillId]: [
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;

    TaskRoleUserSet: TypedEventDescription<{
      encodeTopics([taskId, role, user]: [
        BigNumberish | null,
        null,
        string | null
      ]): string[];
    }>;

    TaskPayoutSet: TypedEventDescription<{
      encodeTopics([taskId, role, token, amount]: [
        BigNumberish | null,
        null,
        null,
        null
      ]): string[];
    }>;

    TaskDeliverableSubmitted: TypedEventDescription<{
      encodeTopics([taskId, deliverableHash]: [
        BigNumberish | null,
        null
      ]): string[];
    }>;

    TaskCompleted: TypedEventDescription<{
      encodeTopics([taskId]: [BigNumberish | null]): string[];
    }>;

    TaskWorkRatingRevealed: TypedEventDescription<{
      encodeTopics([taskId, role, rating]: [
        BigNumberish | null,
        null,
        null
      ]): string[];
    }>;

    TaskFinalized: TypedEventDescription<{
      encodeTopics([taskId]: [BigNumberish | null]): string[];
    }>;

    PayoutClaimed: TypedEventDescription<{
      encodeTopics([fundingPotId, token, amount]: [
        BigNumberish | null,
        string | null,
        null
      ]): string[];
    }>;

    TaskCanceled: TypedEventDescription<{
      encodeTopics([taskId]: [BigNumberish | null]): string[];
    }>;

    DomainAdded: TypedEventDescription<{
      encodeTopics([domainId]: [null]): string[];
    }>;

    FundingPotAdded: TypedEventDescription<{
      encodeTopics([fundingPotId]: [null]): string[];
    }>;
  };
}

export class IColony extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IColony;
  attach(addressOrName: string): IColony;
  deployed(): Promise<IColony>;

  on(event: EventFilter | string, listener: Listener): IColony;
  once(event: EventFilter | string, listener: Listener): IColony;
  addListener(eventName: EventFilter | string, listener: Listener): IColony;
  removeAllListeners(eventName: EventFilter | string): IColony;
  removeListener(eventName: any, listener: Listener): IColony;

  interface: IColonyInterface;

  functions: {
    approveExitRecovery(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    exitRecoveryMode(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    numRecoveryRoles(): Promise<BigNumber>;

    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    isInRecoveryMode(): Promise<boolean>;

    checkNotAdditionalProtectedVariable(_slot: BigNumberish): Promise<void>;

    removeRecoveryRole(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setRecoveryRole(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    enterRecoveryMode(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    authority(): Promise<string>;

    owner(): Promise<string>;

    version(): Promise<BigNumber>;

    upgrade(
      _newVersion: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    finishUpgrade(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getColonyNetwork(): Promise<string>;

    getToken(): Promise<string>;

    setRootRole(
      _user: string,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setArbitrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setArchitectureRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setFundingRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setAdministrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    hasUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish
    ): Promise<boolean>;

    hasInheritedUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish
    ): Promise<boolean>;

    getUserRoles(who: string, where: BigNumberish): Promise<string>;

    initialiseColony(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    bootstrapColony(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    mintTokens(
      _wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateColonyOrbitDB(
      orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getDomain(
      _id: BigNumberish
    ): Promise<{ skillId: BigNumber; fundingPotId: BigNumber }>;

    getDomainCount(): Promise<BigNumber>;

    verifyReputationProof(
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[]
    ): Promise<boolean>;

    makeExpenditure(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferExpenditure(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    cancelExpenditure(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    finalizeExpenditure(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setExpenditureRecipient(
      _id: BigNumberish,
      _slot: BigNumberish,
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setExpenditureSkill(
      _id: BigNumberish,
      _slot: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setExpenditurePayoutModifier(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _slot: BigNumberish,
      _payoutModifier: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setExpenditureClaimDelay(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _slot: BigNumberish,
      _claimDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    claimExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getExpenditureCount(): Promise<BigNumber>;

    getExpenditure(
      _id: BigNumberish
    ): Promise<{
      status: number;
      owner: string;
      fundingPotId: BigNumber;
      domainId: BigNumber;
      finalizedTimestamp: BigNumber;
    }>;

    getExpenditureSlot(
      _id: BigNumberish,
      _slot: BigNumberish
    ): Promise<{
      recipient: string;
      claimDelay: BigNumber;
      payoutModifier: BigNumber;
      skills: BigNumber[];
    }>;

    getExpenditureSlotPayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string
    ): Promise<BigNumber>;

    addPayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    finalizePayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setPaymentRecipient(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setPaymentSkill(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setPaymentPayout(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getPayment(
      _id: BigNumberish
    ): Promise<{
      recipient: string;
      finalized: boolean;
      fundingPotId: BigNumber;
      domainId: BigNumber;
      skills: BigNumber[];
    }>;

    claimPayment(
      _id: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getPaymentCount(): Promise<BigNumber>;

    makeTask(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _specificationHash: Arrayish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getTaskCount(): Promise<BigNumber>;

    getTaskChangeNonce(_id: BigNumberish): Promise<BigNumber>;

    executeTaskChange(
      _sigV: BigNumberish[],
      _sigR: Arrayish[],
      _sigS: Arrayish[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    executeTaskRoleAssignment(
      _sigV: BigNumberish[],
      _sigR: Arrayish[],
      _sigS: Arrayish[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    submitTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _ratingSecret: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    revealTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _rating: BigNumberish,
      _salt: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    generateSecret(_salt: Arrayish, _value: BigNumberish): Promise<string>;

    getTaskWorkRatingSecretsInfo(
      _id: BigNumberish
    ): Promise<{
      nSecrets: BigNumber;
      lastSubmittedAt: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getTaskWorkRatingSecret(
      _id: BigNumberish,
      _role: BigNumberish
    ): Promise<string>;

    setTaskManagerRole(
      _id: BigNumberish,
      _user: string,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setTaskEvaluatorRole(
      _id: BigNumberish,
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setTaskWorkerRole(
      _id: BigNumberish,
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    removeTaskEvaluatorRole(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    removeTaskWorkerRole(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setTaskSkill(
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setTaskBrief(
      _id: BigNumberish,
      _specificationHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setTaskDueDate(
      _id: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    submitTaskDeliverable(
      _id: BigNumberish,
      _deliverableHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    submitTaskDeliverableAndRating(
      _id: BigNumberish,
      _deliverableHash: Arrayish,
      _ratingSecret: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    finalizeTask(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    cancelTask(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    completeTask(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getTask(
      _id: BigNumberish
    ): Promise<{
      specificationHash: string;
      deliverableHash: string;
      status: number;
      dueDate: BigNumber;
      fundingPotId: BigNumber;
      completionTimestamp: BigNumber;
      domainId: BigNumber;
      skillIds: BigNumber[];
      0: string;
      1: string;
      2: number;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber[];
    }>;

    getTaskRole(
      _id: BigNumberish,
      _role: BigNumberish
    ): Promise<{ user: string; rateFail: boolean; rating: number }>;

    setRewardInverse(
      _rewardInverse: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getRewardInverse(): Promise<BigNumber>;

    getTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string
    ): Promise<BigNumber>;

    setTaskManagerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setTaskEvaluatorPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setTaskWorkerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setAllTaskPayouts(
      _id: BigNumberish,
      _token: string,
      _managerAmount: BigNumberish,
      _evaluatorAmount: BigNumberish,
      _workerAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    claimTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    startNextRewardPayout(
      _token: string,
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    claimRewardPayout(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getRewardPayoutInfo(
      _payoutId: BigNumberish
    ): Promise<{
      reputationState: string;
      colonyWideReputation: BigNumber;
      totalTokens: BigNumber;
      amount: BigNumber;
      tokenAddress: string;
      blockTimestamp: BigNumber;
      amountRemaining: BigNumber;
      finalized: boolean;
    }>;

    finalizeRewardPayout(
      _payoutId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getFundingPot(
      _id: BigNumberish
    ): Promise<{
      associatedType: number;
      associatedTypeId: BigNumber;
      payoutsWeCannotMake: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
    }>;

    getFundingPotCount(): Promise<BigNumber>;

    getFundingPotBalance(
      _potId: BigNumberish,
      _token: string
    ): Promise<BigNumber>;

    getFundingPotPayout(
      _potId: BigNumberish,
      _token: string
    ): Promise<BigNumber>;

    moveFundsBetweenPots(
      _permissionDomainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    claimColonyFunds(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getNonRewardPotsTotal(_token: string): Promise<BigNumber>;
  };

  approveExitRecovery(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  exitRecoveryMode(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  numRecoveryRoles(): Promise<BigNumber>;

  setStorageSlotRecovery(
    _slot: BigNumberish,
    _value: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  isInRecoveryMode(): Promise<boolean>;

  checkNotAdditionalProtectedVariable(_slot: BigNumberish): Promise<void>;

  removeRecoveryRole(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setRecoveryRole(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  enterRecoveryMode(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  authority(): Promise<string>;

  owner(): Promise<string>;

  version(): Promise<BigNumber>;

  upgrade(
    _newVersion: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  finishUpgrade(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  getColonyNetwork(): Promise<string>;

  getToken(): Promise<string>;

  setRootRole(
    _user: string,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setArbitrationRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setArchitectureRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setFundingRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setAdministrationRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  hasUserRole(
    _user: string,
    _domainId: BigNumberish,
    _role: BigNumberish
  ): Promise<boolean>;

  hasInheritedUserRole(
    _user: string,
    _domainId: BigNumberish,
    _role: BigNumberish,
    _childSkillIndex: BigNumberish,
    _childDomainId: BigNumberish
  ): Promise<boolean>;

  getUserRoles(who: string, where: BigNumberish): Promise<string>;

  initialiseColony(
    _colonyNetworkAddress: string,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  bootstrapColony(
    _users: string[],
    _amount: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  mintTokens(
    _wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  registerColonyLabel(
    colonyName: string,
    orbitdb: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updateColonyOrbitDB(
    orbitdb: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addDomain(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _parentDomainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getDomain(
    _id: BigNumberish
  ): Promise<{ skillId: BigNumber; fundingPotId: BigNumber }>;

  getDomainCount(): Promise<BigNumber>;

  verifyReputationProof(
    key: Arrayish,
    value: Arrayish,
    branchMask: BigNumberish,
    siblings: Arrayish[]
  ): Promise<boolean>;

  makeExpenditure(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferExpenditure(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  cancelExpenditure(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  finalizeExpenditure(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setExpenditureRecipient(
    _id: BigNumberish,
    _slot: BigNumberish,
    _recipient: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setExpenditurePayout(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setExpenditureSkill(
    _id: BigNumberish,
    _slot: BigNumberish,
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setExpenditurePayoutModifier(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _slot: BigNumberish,
    _payoutModifier: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setExpenditureClaimDelay(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _slot: BigNumberish,
    _claimDelay: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  claimExpenditurePayout(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getExpenditureCount(): Promise<BigNumber>;

  getExpenditure(
    _id: BigNumberish
  ): Promise<{
    status: number;
    owner: string;
    fundingPotId: BigNumber;
    domainId: BigNumber;
    finalizedTimestamp: BigNumber;
  }>;

  getExpenditureSlot(
    _id: BigNumberish,
    _slot: BigNumberish
  ): Promise<{
    recipient: string;
    claimDelay: BigNumber;
    payoutModifier: BigNumber;
    skills: BigNumber[];
  }>;

  getExpenditureSlotPayout(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string
  ): Promise<BigNumber>;

  addPayment(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _recipient: string,
    _token: string,
    _amount: BigNumberish,
    _domainId: BigNumberish,
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  finalizePayment(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setPaymentRecipient(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _recipient: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setPaymentSkill(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setPaymentPayout(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getPayment(
    _id: BigNumberish
  ): Promise<{
    recipient: string;
    finalized: boolean;
    fundingPotId: BigNumber;
    domainId: BigNumber;
    skills: BigNumber[];
  }>;

  claimPayment(
    _id: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getPaymentCount(): Promise<BigNumber>;

  makeTask(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _specificationHash: Arrayish,
    _domainId: BigNumberish,
    _skillId: BigNumberish,
    _dueDate: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getTaskCount(): Promise<BigNumber>;

  getTaskChangeNonce(_id: BigNumberish): Promise<BigNumber>;

  executeTaskChange(
    _sigV: BigNumberish[],
    _sigR: Arrayish[],
    _sigS: Arrayish[],
    _mode: BigNumberish[],
    _value: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  executeTaskRoleAssignment(
    _sigV: BigNumberish[],
    _sigR: Arrayish[],
    _sigS: Arrayish[],
    _mode: BigNumberish[],
    _value: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  submitTaskWorkRating(
    _id: BigNumberish,
    _role: BigNumberish,
    _ratingSecret: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  revealTaskWorkRating(
    _id: BigNumberish,
    _role: BigNumberish,
    _rating: BigNumberish,
    _salt: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  generateSecret(_salt: Arrayish, _value: BigNumberish): Promise<string>;

  getTaskWorkRatingSecretsInfo(
    _id: BigNumberish
  ): Promise<{
    nSecrets: BigNumber;
    lastSubmittedAt: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  getTaskWorkRatingSecret(
    _id: BigNumberish,
    _role: BigNumberish
  ): Promise<string>;

  setTaskManagerRole(
    _id: BigNumberish,
    _user: string,
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setTaskEvaluatorRole(
    _id: BigNumberish,
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setTaskWorkerRole(
    _id: BigNumberish,
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  removeTaskEvaluatorRole(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  removeTaskWorkerRole(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setTaskSkill(
    _id: BigNumberish,
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setTaskBrief(
    _id: BigNumberish,
    _specificationHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setTaskDueDate(
    _id: BigNumberish,
    _dueDate: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  submitTaskDeliverable(
    _id: BigNumberish,
    _deliverableHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  submitTaskDeliverableAndRating(
    _id: BigNumberish,
    _deliverableHash: Arrayish,
    _ratingSecret: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  finalizeTask(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  cancelTask(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  completeTask(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getTask(
    _id: BigNumberish
  ): Promise<{
    specificationHash: string;
    deliverableHash: string;
    status: number;
    dueDate: BigNumber;
    fundingPotId: BigNumber;
    completionTimestamp: BigNumber;
    domainId: BigNumber;
    skillIds: BigNumber[];
    0: string;
    1: string;
    2: number;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber[];
  }>;

  getTaskRole(
    _id: BigNumberish,
    _role: BigNumberish
  ): Promise<{ user: string; rateFail: boolean; rating: number }>;

  setRewardInverse(
    _rewardInverse: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getRewardInverse(): Promise<BigNumber>;

  getTaskPayout(
    _id: BigNumberish,
    _role: BigNumberish,
    _token: string
  ): Promise<BigNumber>;

  setTaskManagerPayout(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setTaskEvaluatorPayout(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setTaskWorkerPayout(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setAllTaskPayouts(
    _id: BigNumberish,
    _token: string,
    _managerAmount: BigNumberish,
    _evaluatorAmount: BigNumberish,
    _workerAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  claimTaskPayout(
    _id: BigNumberish,
    _role: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  startNextRewardPayout(
    _token: string,
    key: Arrayish,
    value: Arrayish,
    branchMask: BigNumberish,
    siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  claimRewardPayout(
    _payoutId: BigNumberish,
    _squareRoots: BigNumberish[],
    key: Arrayish,
    value: Arrayish,
    branchMask: BigNumberish,
    siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getRewardPayoutInfo(
    _payoutId: BigNumberish
  ): Promise<{
    reputationState: string;
    colonyWideReputation: BigNumber;
    totalTokens: BigNumber;
    amount: BigNumber;
    tokenAddress: string;
    blockTimestamp: BigNumber;
    amountRemaining: BigNumber;
    finalized: boolean;
  }>;

  finalizeRewardPayout(
    _payoutId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getFundingPot(
    _id: BigNumberish
  ): Promise<{
    associatedType: number;
    associatedTypeId: BigNumber;
    payoutsWeCannotMake: BigNumber;
    0: number;
    1: BigNumber;
    2: BigNumber;
  }>;

  getFundingPotCount(): Promise<BigNumber>;

  getFundingPotBalance(
    _potId: BigNumberish,
    _token: string
  ): Promise<BigNumber>;

  getFundingPotPayout(_potId: BigNumberish, _token: string): Promise<BigNumber>;

  moveFundsBetweenPots(
    _permissionDomainId: BigNumberish,
    _fromChildSkillIndex: BigNumberish,
    _toChildSkillIndex: BigNumberish,
    _fromPot: BigNumberish,
    _toPot: BigNumberish,
    _amount: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  claimColonyFunds(
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getNonRewardPotsTotal(_token: string): Promise<BigNumber>;

  filters: {
    RecoveryRoleSet(user: string | null, setTo: null): EventFilter;

    ColonyInitialised(colonyNetwork: null, token: null): EventFilter;

    ColonyBootstrapped(users: null, amounts: null): EventFilter;

    ColonyUpgraded(oldVersion: null, newVersion: null): EventFilter;

    ColonyRoleSet(
      user: string | null,
      domainId: BigNumberish | null,
      role: BigNumberish | null,
      setTo: null
    ): EventFilter;

    ColonyFundsMovedBetweenFundingPots(
      fromPot: BigNumberish | null,
      toPot: BigNumberish | null,
      amount: null,
      token: null
    ): EventFilter;

    ColonyFundsClaimed(
      token: null,
      fee: null,
      payoutRemainder: null
    ): EventFilter;

    RewardPayoutCycleStarted(rewardPayoutId: null): EventFilter;

    RewardPayoutCycleEnded(rewardPayoutId: null): EventFilter;

    RewardPayoutClaimed(
      rewardPayoutId: null,
      user: null,
      fee: null,
      rewardRemainder: null
    ): EventFilter;

    ColonyRewardInverseSet(rewardInverse: null): EventFilter;

    ExpenditureAdded(expenditureId: null): EventFilter;

    ExpenditureTransferred(
      expenditureId: BigNumberish | null,
      owner: string | null
    ): EventFilter;

    ExpenditureCancelled(expenditureId: BigNumberish | null): EventFilter;

    ExpenditureFinalized(expenditureId: BigNumberish | null): EventFilter;

    ExpenditureRecipientSet(
      expenditureId: BigNumberish | null,
      slot: BigNumberish | null,
      recipient: string | null
    ): EventFilter;

    ExpenditureSkillSet(
      expenditureId: BigNumberish | null,
      slot: BigNumberish | null,
      skillId: BigNumberish | null
    ): EventFilter;

    ExpenditurePayoutSet(
      expenditureId: BigNumberish | null,
      slot: BigNumberish | null,
      token: string | null,
      amount: null
    ): EventFilter;

    PaymentAdded(paymentId: null): EventFilter;

    TaskAdded(taskId: null): EventFilter;

    TaskBriefSet(
      taskId: BigNumberish | null,
      specificationHash: null
    ): EventFilter;

    TaskDueDateSet(taskId: BigNumberish | null, dueDate: null): EventFilter;

    TaskSkillSet(
      taskId: BigNumberish | null,
      skillId: BigNumberish | null
    ): EventFilter;

    TaskRoleUserSet(
      taskId: BigNumberish | null,
      role: null,
      user: string | null
    ): EventFilter;

    TaskPayoutSet(
      taskId: BigNumberish | null,
      role: null,
      token: null,
      amount: null
    ): EventFilter;

    TaskDeliverableSubmitted(
      taskId: BigNumberish | null,
      deliverableHash: null
    ): EventFilter;

    TaskCompleted(taskId: BigNumberish | null): EventFilter;

    TaskWorkRatingRevealed(
      taskId: BigNumberish | null,
      role: null,
      rating: null
    ): EventFilter;

    TaskFinalized(taskId: BigNumberish | null): EventFilter;

    PayoutClaimed(
      fundingPotId: BigNumberish | null,
      token: string | null,
      amount: null
    ): EventFilter;

    TaskCanceled(taskId: BigNumberish | null): EventFilter;

    DomainAdded(domainId: null): EventFilter;

    FundingPotAdded(fundingPotId: null): EventFilter;
  };

  estimate: {
    approveExitRecovery(): Promise<BigNumber>;

    exitRecoveryMode(): Promise<BigNumber>;

    numRecoveryRoles(): Promise<BigNumber>;

    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: Arrayish
    ): Promise<BigNumber>;

    isInRecoveryMode(): Promise<BigNumber>;

    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish
    ): Promise<BigNumber>;

    removeRecoveryRole(_user: string): Promise<BigNumber>;

    setRecoveryRole(_user: string): Promise<BigNumber>;

    enterRecoveryMode(): Promise<BigNumber>;

    authority(): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    version(): Promise<BigNumber>;

    upgrade(_newVersion: BigNumberish): Promise<BigNumber>;

    finishUpgrade(): Promise<BigNumber>;

    getColonyNetwork(): Promise<BigNumber>;

    getToken(): Promise<BigNumber>;

    setRootRole(_user: string, _setTo: boolean): Promise<BigNumber>;

    setArbitrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean
    ): Promise<BigNumber>;

    setArchitectureRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean
    ): Promise<BigNumber>;

    setFundingRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean
    ): Promise<BigNumber>;

    setAdministrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean
    ): Promise<BigNumber>;

    hasUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish
    ): Promise<BigNumber>;

    hasInheritedUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish
    ): Promise<BigNumber>;

    getUserRoles(who: string, where: BigNumberish): Promise<BigNumber>;

    initialiseColony(
      _colonyNetworkAddress: string,
      _token: string
    ): Promise<BigNumber>;

    bootstrapColony(
      _users: string[],
      _amount: BigNumberish[]
    ): Promise<BigNumber>;

    mintTokens(_wad: BigNumberish): Promise<BigNumber>;

    registerColonyLabel(
      colonyName: string,
      orbitdb: string
    ): Promise<BigNumber>;

    updateColonyOrbitDB(orbitdb: string): Promise<BigNumber>;

    addDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish
    ): Promise<BigNumber>;

    getDomain(_id: BigNumberish): Promise<BigNumber>;

    getDomainCount(): Promise<BigNumber>;

    verifyReputationProof(
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[]
    ): Promise<BigNumber>;

    makeExpenditure(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish
    ): Promise<BigNumber>;

    transferExpenditure(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _newOwner: string
    ): Promise<BigNumber>;

    cancelExpenditure(_id: BigNumberish): Promise<BigNumber>;

    finalizeExpenditure(_id: BigNumberish): Promise<BigNumber>;

    setExpenditureRecipient(
      _id: BigNumberish,
      _slot: BigNumberish,
      _recipient: string
    ): Promise<BigNumber>;

    setExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    setExpenditureSkill(
      _id: BigNumberish,
      _slot: BigNumberish,
      _skillId: BigNumberish
    ): Promise<BigNumber>;

    setExpenditurePayoutModifier(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _slot: BigNumberish,
      _payoutModifier: BigNumberish
    ): Promise<BigNumber>;

    setExpenditureClaimDelay(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _slot: BigNumberish,
      _claimDelay: BigNumberish
    ): Promise<BigNumber>;

    claimExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string
    ): Promise<BigNumber>;

    getExpenditureCount(): Promise<BigNumber>;

    getExpenditure(_id: BigNumberish): Promise<BigNumber>;

    getExpenditureSlot(
      _id: BigNumberish,
      _slot: BigNumberish
    ): Promise<BigNumber>;

    getExpenditureSlotPayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string
    ): Promise<BigNumber>;

    addPayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      _domainId: BigNumberish,
      _skillId: BigNumberish
    ): Promise<BigNumber>;

    finalizePayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish
    ): Promise<BigNumber>;

    setPaymentRecipient(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _recipient: string
    ): Promise<BigNumber>;

    setPaymentSkill(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _skillId: BigNumberish
    ): Promise<BigNumber>;

    setPaymentPayout(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    getPayment(_id: BigNumberish): Promise<BigNumber>;

    claimPayment(_id: BigNumberish, _token: string): Promise<BigNumber>;

    getPaymentCount(): Promise<BigNumber>;

    makeTask(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _specificationHash: Arrayish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      _dueDate: BigNumberish
    ): Promise<BigNumber>;

    getTaskCount(): Promise<BigNumber>;

    getTaskChangeNonce(_id: BigNumberish): Promise<BigNumber>;

    executeTaskChange(
      _sigV: BigNumberish[],
      _sigR: Arrayish[],
      _sigS: Arrayish[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: Arrayish
    ): Promise<BigNumber>;

    executeTaskRoleAssignment(
      _sigV: BigNumberish[],
      _sigR: Arrayish[],
      _sigS: Arrayish[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: Arrayish
    ): Promise<BigNumber>;

    submitTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _ratingSecret: Arrayish
    ): Promise<BigNumber>;

    revealTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _rating: BigNumberish,
      _salt: Arrayish
    ): Promise<BigNumber>;

    generateSecret(_salt: Arrayish, _value: BigNumberish): Promise<BigNumber>;

    getTaskWorkRatingSecretsInfo(_id: BigNumberish): Promise<BigNumber>;

    getTaskWorkRatingSecret(
      _id: BigNumberish,
      _role: BigNumberish
    ): Promise<BigNumber>;

    setTaskManagerRole(
      _id: BigNumberish,
      _user: string,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish
    ): Promise<BigNumber>;

    setTaskEvaluatorRole(_id: BigNumberish, _user: string): Promise<BigNumber>;

    setTaskWorkerRole(_id: BigNumberish, _user: string): Promise<BigNumber>;

    removeTaskEvaluatorRole(_id: BigNumberish): Promise<BigNumber>;

    removeTaskWorkerRole(_id: BigNumberish): Promise<BigNumber>;

    setTaskSkill(_id: BigNumberish, _skillId: BigNumberish): Promise<BigNumber>;

    setTaskBrief(
      _id: BigNumberish,
      _specificationHash: Arrayish
    ): Promise<BigNumber>;

    setTaskDueDate(
      _id: BigNumberish,
      _dueDate: BigNumberish
    ): Promise<BigNumber>;

    submitTaskDeliverable(
      _id: BigNumberish,
      _deliverableHash: Arrayish
    ): Promise<BigNumber>;

    submitTaskDeliverableAndRating(
      _id: BigNumberish,
      _deliverableHash: Arrayish,
      _ratingSecret: Arrayish
    ): Promise<BigNumber>;

    finalizeTask(_id: BigNumberish): Promise<BigNumber>;

    cancelTask(_id: BigNumberish): Promise<BigNumber>;

    completeTask(_id: BigNumberish): Promise<BigNumber>;

    getTask(_id: BigNumberish): Promise<BigNumber>;

    getTaskRole(_id: BigNumberish, _role: BigNumberish): Promise<BigNumber>;

    setRewardInverse(_rewardInverse: BigNumberish): Promise<BigNumber>;

    getRewardInverse(): Promise<BigNumber>;

    getTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string
    ): Promise<BigNumber>;

    setTaskManagerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    setTaskEvaluatorPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    setTaskWorkerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    setAllTaskPayouts(
      _id: BigNumberish,
      _token: string,
      _managerAmount: BigNumberish,
      _evaluatorAmount: BigNumberish,
      _workerAmount: BigNumberish
    ): Promise<BigNumber>;

    claimTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string
    ): Promise<BigNumber>;

    startNextRewardPayout(
      _token: string,
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[]
    ): Promise<BigNumber>;

    claimRewardPayout(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[]
    ): Promise<BigNumber>;

    getRewardPayoutInfo(_payoutId: BigNumberish): Promise<BigNumber>;

    finalizeRewardPayout(_payoutId: BigNumberish): Promise<BigNumber>;

    getFundingPot(_id: BigNumberish): Promise<BigNumber>;

    getFundingPotCount(): Promise<BigNumber>;

    getFundingPotBalance(
      _potId: BigNumberish,
      _token: string
    ): Promise<BigNumber>;

    getFundingPotPayout(
      _potId: BigNumberish,
      _token: string
    ): Promise<BigNumber>;

    moveFundsBetweenPots(
      _permissionDomainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string
    ): Promise<BigNumber>;

    claimColonyFunds(_token: string): Promise<BigNumber>;

    getNonRewardPotsTotal(_token: string): Promise<BigNumber>;
  };
}
